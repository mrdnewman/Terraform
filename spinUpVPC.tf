# remote state storage and locking config,
# auto generated by stc-terraform-statelockinit v1.1.0,
terraform {
  backend "s3" {
    encrypt = true,
    bucket = "tfsl-common-us-east-2",
    dynamodb_table = "tfsl-dn-sd1-49c6dcda",
    region = "us-east-2",
    key = "dn-sd3.tfstate",
  },
}

# providers

provider "aws" {
  region = "${var.targetawsregion}"
  profile = "${var.awsprofile}"
}

provider "datadog" {
  api_key = "${var.dd_apikey}"
  app_key = "${var.dd_appkey}"
}

# common tags
locals {
  common_tags = "${map(
    "terraformmanaged" , true,
    "tfpname" , "${var.tfpname}",
    "tfpversion", "${var.tfpversion}",
    "environment" , "${var.stc_customer}.${var.stc_class}",
    "division", "${var.stcdivision}",
    "subdomain", "${var.m_iwebsuite_subdomain}",
    "hostedzone", "${var.hostedzone}"
  )}"
}

# availability zones in our specified region
data "aws_availability_zones" "available" {}

#shorter availability_zone vars
locals {
  aws_region_az1 = "${data.aws_availability_zones.available.names[0]}"
  aws_region_az2 = "${data.aws_availability_zones.available.names[1]}"
  aws_region_az3 = "${data.aws_availability_zones.available.names[2]}"
}

locals {
  workstation_rt_list = "${list(
    "${module.iwebsuite.rt_iwebsuite_private_az1_id}",
    "${module.iwebsuite.rt_iwebsuite_private_az2_id}",
    "${module.iwebsuite.rt_iwebsuite_private_az3_id}"
  )}"
}

data "aws_route53_zone" "zone" {
  name         = "${var.hostedzone}."
  private_zone = false
}

resource "aws_route53_record" "a_keycloakrds_priv" {
  zone_id = "${module.iwebsuite.zone_subdomain_id}"
  name    = "keycloakrds.${var.subdomain}.${var.hostedzone}."
  type    = "CNAME"
  ttl     = "300"
  records = ["${aws_db_instance.keycloak_rds.address}"]
}

# This is setup for AFIX however we will need jasper_reports for voms so 
# This should be renamed accordingly
# Renamed as ... a_voms_jasper_public
resource "aws_route53_record" "a_voms_jasper_public" {
  zone_id = "${module.iwebsuite.zone_subdomain_id}"
  name    = "jasper.${var.subdomain}.${var.hostedzone}."
  type    = "A"
  ttl     = "300"
  records = ["${aws_instance.jasper_reports.public_ip}"]
}

# Again keycloak is required for VOMS but not AFIx so can be renamed
# Renamed as ... a_voms_keycloak_public
resource "aws_route53_record" "a_voms_keycloak_public" {
  zone_id = "${module.iwebsuite.zone_subdomain_id}"
  name    = "keycloak.${var.subdomain}.${var.hostedzone}."
  type    = "A"
  ttl     = "300"
  records = ["${aws_instance.keycloak.public_ip}"]
}

# Can be renamed for VOMS
# renamed as ... a_voms_dashboard_public
resource "aws_route53_record" "a_voms_dashboard_public" {
  zone_id = "${module.iwebsuite.zone_subdomain_id}"
  name    = "dashboard.${var.subdomain}.${var.hostedzone}."
  type    = "A"
  ttl     = "300"
  records = ["${aws_instance.dashboard.public_ip}"]
}

resource "aws_db_subnet_group" "rds_group" {
  name       = "main_${var.stc_profile_name}"
  subnet_ids = ["${module.iwebsuite.sn_iwebsuite_private_az1_id}", "${module.iwebsuite.sn_iwebsuite_private_az2_id}"]

  tags {
    Name = "RDS Group"
  }
}

module "tfmodsgeneric" {
  source = "stc-packerbuild-bucket.s3-us-east-2.amazonaws.com/stc.tfmods.generic-201809070515.tar.gz"
  #source = "../stc.tfmods.generic"
}

module "iwebsuite" {
  source = "stc-packerbuild-bucket.s3-us-east-2.amazonaws.com/stc.iwebsuite.terraform.modules-201809071407.tar.gz"
  #source = "../stc.iwebsuite.terraform.modules"

  # standard vars
  tfpname =               "${var.tfpname}"
  tfpversion =            "${var.tfpversion}"
  jenkinsbuildurl =       "${var.jenkinsbuildurl}"
  jenkinstfvaroverrides = "${var.jenkinstfvaroverrides}"
  stcdivision =           "${var.stcdivision}"
  hostedzone =            "${var.hostedzone}"
  is_global_env =         "${var.is_global_env}"
  global_designator =     "${var.global_designator}"
  zone_id =               "${data.aws_route53_zone.zone.zone_id}"
  iwebroute =             "${var.iwebroute}"
  phcroute =              "${var.phcroute}"
  awsprofile =            "${var.awsprofile}"
  targetawsregion =       "${var.targetawsregion}"
  aws_ssh_kp =            "${var.aws_ssh_kp}"
  stc_customer =          "${var.stc_customer}"
  stc_class =             "${var.stc_class}"
  vpc_cidr =              "${var.vpc_cidr}"

  # iwebsuite module vars
  subdomain =             "${var.m_iwebsuite_subdomain}"
  is_global_env =         "${var.m_iwebsuite_is_global_env}"
  global_designator =     "${var.m_iwebsuite_global_designator}"
  appcfdfqdn =            "${var.m_iwebsuite_appcfdfqdn}"
  vpc_cidr_prefix =       "${var.m_iwebsuite_vpc_cidr_prefix}"
  phc_enabled =           "${var.m_iwebsuite_phc_enabled}"
  workstation_ami =       "${var.m_iwebsuite_workstation_ami}"
  dd_pd_esc =             "${var.m_iwebsuite_dd_pd_esc}"
  dd_slk_esc =            "${var.m_iwebsuite_dd_slk_esc}"

  # parent module vars
  db_public_ip =          "${aws_instance.iwebsuitedb_az1.public_ip}"
  db_private_ip =         "${aws_instance.iwebsuitedb_az1.private_ip}"
}

module "appserver" {
  source = "stc-packerbuild-bucket.s3-us-east-2.amazonaws.com/stc.iwebsuite.appserver.terraform.module-201809070321.tar.gz"
  #source = "../stc.iwebsuite.appserver.terraform.module"

  # standard vars
  tfpname =               "${var.tfpname}"
  tfpversion =            "${var.tfpversion}"
  stcdivision =           "${var.stcdivision}"
  hostedzone =            "${var.hostedzone}"
  zone_id =               "${data.aws_route53_zone.zone.zone_id}"
  awsprofile =            "${var.awsprofile}"
  targetawsregion =       "${var.targetawsregion}"
  aws_ssh_kp =            "${var.aws_ssh_kp}"
  stc_customer =          "${var.stc_customer}"
  stc_class =             "${var.stc_class}"
  
  # preexisting infrastructure vars
  vpc_id =                    "${module.iwebsuite.vpc_id}"
  vpc_cidr =                  "${var.vpc_cidr}"
  igw_id =                    "${module.iwebsuite.igw_id}"
  natgw_az1_id =              "${module.iwebsuite.natgw_az1_id}"
  natgw_az2_id =              "${module.iwebsuite.natgw_az2_id}"
  natgw_az3_id =              "${module.iwebsuite.natgw_az3_id}"
  rt_private_id =             "${module.iwebsuite.rt_iwebsuite_private_az1_id}" 
  sg_private_id =             "${module.iwebsuite.sg_iwebsuite_private_id}"
  sg_iwebsuitedb_id =         "${module.iwebsuite.sg_iwebsuite_private_id}"
  sg_workstation_ingress_id = "${module.iwebsuite.sg_workstation_ingress_id}"
  sg_datadog_egress_id =      "${module.iwebsuite.sg_datadog_egress_id}"
  
  # config for both iwebsuite and canary
  iwebroute =                         "${var.iwebroute}"
  phcroute =                          "${var.phcroute}"
  tzdata2018e =                       "${var.m_appserver_tzdata2018e}"
  appfqdn =                           "${var.m_appserver_appfqdn}"
  iwebsuite_tg_deregistration_delay = "${var.m_appserver_iwebsuite_tg_deregistration_delay}"
  iwebsuite_tg_cookie_duration =      "${var.m_appserver_iwebsuite_tg_cookie_duration}"
  iwebsched_deploystate =             "${var.m_appserver_iwebsched_deploystate}"
  iwebsched_ami =                     "${var.m_appserver_iwebsched_ami}"
  iwebsched_instancetype =            "${var.m_appserver_iwebsched_instancetype}"
  phcsched_deploystate =              "${var.m_appserver_phcsched_deploystate}"
  phcsched_ami =                      "${var.m_appserver_phcsched_ami}"
  phcsched_instancetype =             "${var.m_appserver_phcsched_instancetype}"
  iwebsuite_allow_public_access =     "${var.m_appserver_iwebsuite_allow_public_access}"

  # iwebsuite blue config 
  # iwebapp blue
  iwebapp_blue_deploystate =         "${var.m_appserver_iwebapp_blue_deploystate}"
  iwebapp_blue_ami =                 "${var.m_appserver_iwebapp_blue_ami}"
  iwebapp_blue_instancetype =        "${var.m_appserver_iwebapp_blue_instancetype}"
  iwebapp_blue_minsize =             "${var.m_appserver_iwebapp_blue_minsize}"
  iwebapp_blue_desiredcapacity =     "${var.m_appserver_iwebapp_blue_desiredcapacity}"
  iwebapp_blue_maxsize =             "${var.m_appserver_iwebapp_blue_maxsize}"
  iwebapp_blue_asg_hcgp =            "${var.m_appserver_iwebapp_blue_asg_hcgp}"
  iwebapp_blue_asg_defaultcooldown = "${var.m_appserver_iwebapp_blue_asg_defaultcooldown}"

  # phcapp blue   
  phcapp_blue_deploystate =         "${var.m_appserver_phcapp_blue_deploystate}"
  phcapp_blue_ami =                 "${var.m_appserver_phcapp_blue_ami}"
  phcapp_blue_instancetype =        "${var.m_appserver_phcapp_blue_instancetype}"
  phcapp_blue_minsize =             "${var.m_appserver_phcapp_blue_minsize}"
  phcapp_blue_desiredcapacity =     "${var.m_appserver_phcapp_blue_desiredcapacity}"
  phcapp_blue_maxsize =             "${var.m_appserver_phcapp_blue_maxsize}"
  phcapp_blue_asg_hcgp =            "${var.m_appserver_phcapp_blue_asg_hcgp}"
  phcapp_blue_asg_defaultcooldown = "${var.m_appserver_phcapp_blue_asg_defaultcooldown}"

  # iwebsuite green config
  # iwebapp green
  iwebapp_green_deploystate =         "${var.m_appserver_iwebapp_green_deploystate}"
  iwebapp_green_ami =                 "${var.m_appserver_iwebapp_green_ami}"
  iwebapp_green_instancetype =        "${var.m_appserver_iwebapp_green_instancetype}"
  iwebapp_green_minsize =             "${var.m_appserver_iwebapp_green_minsize}"
  iwebapp_green_desiredcapacity =     "${var.m_appserver_iwebapp_green_desiredcapacity}"
  iwebapp_green_maxsize =             "${var.m_appserver_iwebapp_green_maxsize}"
  iwebapp_green_asg_hcgp =            "${var.m_appserver_iwebapp_green_asg_hcgp}"
  iwebapp_green_asg_defaultcooldown = "${var.m_appserver_iwebapp_green_asg_defaultcooldown}"
  
  # phcapp green
  phcapp_green_deploystate =         "${var.m_appserver_phcapp_green_deploystate}"
  phcapp_green_ami =                 "${var.m_appserver_phcapp_green_ami}"
  phcapp_green_instancetype =        "${var.m_appserver_phcapp_green_instancetype}"
  phcapp_green_minsize =             "${var.m_appserver_phcapp_green_minsize}"
  phcapp_green_desiredcapacity =     "${var.m_appserver_phcapp_green_desiredcapacity}"
  phcapp_green_maxsize =             "${var.m_appserver_phcapp_green_maxsize}"
  phcapp_green_asg_hcgp =            "${var.m_appserver_phcapp_green_asg_hcgp}"
  phcapp_green_asg_defaultcooldown = "${var.m_appserver_phcapp_green_asg_defaultcooldown}"

  # canary suite config
  appfqdn_canary =                           "${var.m_appserver_appfqdn_canary}"
  iwebsuite_canary_deploystate =             "${var.m_appserver_iwebsuite_canary_deploystate}"
  iwebsuite_canary_tg_deregistration_delay = "${var.m_appserver_iwebsuite_canary_tg_deregistration_delay}"
  iwebsuite_canary_tg_cookie_duration =      "${var.m_appserver_iwebsuite_canary_tg_cookie_duration}"

  # canary iwebapp
  canary_iwebapp_ami =                 "${var.m_appserver_canary_iwebapp_ami}"
  canary_iwebapp_instancetype =        "${var.m_appserver_canary_iwebapp_instancetype}"
  canary_iwebapp_minsize =             "${var.m_appserver_canary_iwebapp_minsize}"
  canary_iwebapp_desiredcapacity =     "${var.m_appserver_canary_iwebapp_desiredcapacity}"
  canary_iwebapp_maxsize =             "${var.m_appserver_canary_iwebapp_maxsize}"
  canary_iwebapp_asg_hcgp =            "${var.m_appserver_canary_iwebapp_asg_hcgp}"
  canary_iwebapp_asg_defaultcooldown = "${var.m_appserver_canary_iwebapp_asg_defaultcooldown}"

  # canary phcapp
  canary_phcapp_ami =                   "${var.m_appserver_canary_phcapp_ami}"
  canary_phcapp_instancetype =          "${var.m_appserver_canary_phcapp_instancetype}"
  canary_phcapp_minsize =               "${var.m_appserver_canary_phcapp_minsize}"
  canary_phcapp_desiredcapacity =       "${var.m_appserver_canary_phcapp_desiredcapacity}"
  canary_phcapp_maxsize =               "${var.m_appserver_canary_phcapp_maxsize}"
  canary_phcapp_asg_hcgp =              "${var.m_appserver_canary_phcapp_asg_hcgp}"
  canary_phcapp_asg_defaultcooldown =   "${var.m_appserver_canary_phcapp_asg_defaultcooldown}"
}

## Instances ######################################################################################


# VOMs App Server Entry 
################################################

resource "aws_instance" "vomsapp" {
  ami                         = "ami-04f4fcf6a4fc879eb"
  instance_type               = "t2.large"
  availability_zone           = "${local.aws_region_az1}"
  vpc_security_group_ids      = ["${module.iwebsuite.sg_iwebsuite_private_id}"
                                  , "${module.iwebsuite.sg_solarwinds_ingress_id}"
                                  # , "${module.iwebsuite.sg_temp_database_whitelist3389_id}"
                                  # , "${module.iwebsuite.sg_temp_database_whitelist1521_id}"
                                ]
  subnet_id                   = "${module.iwebsuite.sn_iwebsuite_private_az1_id}"
  associate_public_ip_address = true
  key_name                    = "${var.aws_ssh_kp}"
  iam_instance_profile        = "${aws_iam_instance_profile.stc_env_test_profile.id}"

  root_block_device {
    volume_size = "60"
    volume_type = "gp2"
    delete_on_termination = true
  }
  tags = "${merge(
    local.common_tags,
    map(
      "Name","vomsapp",
      "Instancename","${var.stc_customer}.${var.stc_class}"
    )
  )}"
}

resource "aws_instance" "iwebsuitedb_az1" {
# ami created from testing
# so don't use this in prod
 ami                          = "${var.dbserver_ami}"
 instance_type                = "r4.xlarge"
 availability_zone            = "${local.aws_region_az1}"
 associate_public_ip_address  = true
 vpc_security_group_ids       = ["${module.iwebsuite.sg_iwebsuite_private_id}"
                                  , "${module.iwebsuite.sg_solarwinds_ingress_id}"
                                  #  , "${module.iwebsuite.sg_temp_database_whitelist33891521_id}"
                                ]
 subnet_id                    = "${module.iwebsuite.sn_iwebsuite_private_az1_id}"
 key_name                     = "${var.aws_ssh_kp}"
 root_block_device {
 }
  tags = "${merge(
   local.common_tags,
   map(
     "Name","iwebsuitedb_az1",
     "ddname","iwebsuitedb_az1",
     "scheduler:ebs-snapshot","0100;14;us/eastern;all"
   )
  )}"
}

resource "aws_instance" "subiweb2" {
  ami                         = "ami-0aadc3213ef792132"
  instance_type               = "t2.large"
  availability_zone           = "${local.aws_region_az1}"
  vpc_security_group_ids      = ["${module.iwebsuite.sg_iwebsuite_private_id}"
                                  , "${module.iwebsuite.sg_solarwinds_ingress_id}"
                                  # , "${module.iwebsuite.sg_temp_database_whitelist3389_id}"
                                  # , "${module.iwebsuite.sg_temp_database_whitelist1521_id}"
                                ]
  subnet_id                   = "${module.iwebsuite.sn_iwebsuite_private_az1_id}"
  associate_public_ip_address = true
  key_name                    = "${var.aws_ssh_kp}"
  iam_instance_profile        = "${aws_iam_instance_profile.stc_env_test_profile.id}"
  
  tags = "${merge(
    local.common_tags,
    map(
      "Name","subiweb",
      "Instancename","${var.stc_customer}.${var.stc_class}"
    )
  )}"
}

resource "aws_instance" "subphc2" {
  ami                         = "ami-0f66eda53d1776638"
  instance_type               = "t2.large"
  availability_zone           = "${local.aws_region_az1}"
  vpc_security_group_ids      = ["${module.iwebsuite.sg_iwebsuite_private_id}"
                                  , "${module.iwebsuite.sg_solarwinds_ingress_id}"
                                  # , "${module.iwebsuite.sg_temp_database_whitelist3389_id}"
                                  # , "${module.iwebsuite.sg_temp_database_whitelist1521_id}"
                                ]
  subnet_id                   = "${module.iwebsuite.sn_iwebsuite_private_az1_id}"
  associate_public_ip_address = true
  key_name                    = "${var.aws_ssh_kp}"
  iam_instance_profile        = "${aws_iam_instance_profile.stc_env_test_profile.id}"
   
  tags = "${merge(
    local.common_tags,
    map(
      "Name","subphc",
      "Instancename","${var.stc_customer}.${var.stc_class}"
    )
  )}"
}

### Keycloak Instances ############################################################################

resource "aws_instance" "keycloak" {
  ami                         = "ami-0ce439dedabde3f2d"
  instance_type               = "t2.large"
  availability_zone           = "${local.aws_region_az1}"
  vpc_security_group_ids      = ["${module.iwebsuite.sg_iwebsuite_private_id}"
                                  , "${module.iwebsuite.sg_solarwinds_ingress_id}"
                                  # , "${module.iwebsuite.sg_temp_database_whitelist3389_id}"
                                  # , "${module.iwebsuite.sg_temp_database_whitelist1521_id}"
                                ]
  subnet_id                   = "${module.iwebsuite.sn_iwebsuite_private_az1_id}"
  associate_public_ip_address = true
  key_name                    = "${var.aws_ssh_kp}"
  iam_instance_profile        = "${aws_iam_instance_profile.stc_env_test_profile.id}"

  tags = "${merge(
    local.common_tags,
    map(
      "Name","keycloak",
      "Instancename","${var.stc_customer}.${var.stc_class}",
      "stateCode", "${var.stc_state_cd}"
    )
  )}"
}

resource "aws_db_instance" "keycloak_rds" {
  instance_class            = "db.t2.micro"
  snapshot_identifier       = "keycloak-empty-env-initial-snapshot-v5"
  vpc_security_group_ids    = ["${module.iwebsuite.sg_iwebsuite_private_id}"
                                , "${module.iwebsuite.sg_solarwinds_ingress_id}"
                                # , "${module.iwebsuite.sg_temp_database_whitelist3389_id}"
                                # , "${module.iwebsuite.sg_temp_database_whitelist1521_id}"
                              ]
  db_subnet_group_name      = "${aws_db_subnet_group.rds_group.id}"
  final_snapshot_identifier = "final-snapshot-davidN3223"
  skip_final_snapshot       = true

  tags = "${merge(
    local.common_tags,
    map(
      "Name","keycloak_rds"
    )
  )}"
}

# Node Dashboard server

resource "aws_instance" "dashboard" {
  ami                         = "ami-0d240cd15cbca3e36"
  instance_type               = "t2.large"
  availability_zone           = "${local.aws_region_az1}"
  vpc_security_group_ids      = ["${module.iwebsuite.sg_iwebsuite_private_id}"
                                  , "${module.iwebsuite.sg_solarwinds_ingress_id}"
                                  # , "${module.iwebsuite.sg_temp_database_whitelist33891521_id}"
                                ]
  subnet_id                   = "${module.iwebsuite.sn_iwebsuite_private_az1_id}"
  associate_public_ip_address = true
  key_name                    = "${var.aws_ssh_kp}"
  iam_instance_profile        = "${aws_iam_instance_profile.stc_env_test_profile.id}"
  root_block_device {
   volume_size = "60"
   volume_type = "gp2"
   delete_on_termination = true
 }
  tags = "${merge(
    local.common_tags,
    map(
      "Name","Dashboard",
      "Instancename","${var.stc_customer}.${var.stc_class}",
      "stateCode", "${var.stc_state_cd}"
    )
  )}"
}

# JasperSoft Reports server
resource "aws_instance" "jasper_reports" {
  ami                         = "ami-038717d35237f4264"
  instance_type               = "t2.large"
  availability_zone           = "${local.aws_region_az1}"
  vpc_security_group_ids      = ["${module.iwebsuite.sg_iwebsuite_private_id}"
                                  , "${module.iwebsuite.sg_solarwinds_ingress_id}"
                                  , "${module.iwebsuite.sg_temp_database_whitelist33891521_id}"
                                ]
  subnet_id                   = "${module.iwebsuite.sn_iwebsuite_private_az1_id}"
  associate_public_ip_address = true
  key_name                    = "${var.aws_ssh_kp}"
  iam_instance_profile        = "${aws_iam_instance_profile.stc_env_test_profile.id}"
  
  root_block_device {
   volume_size = "100"
   volume_type = "gp2"
   delete_on_termination = true
 }
  tags = "${merge(
    local.common_tags,
    map(
      "Name","Jasper_Reports",
      "tzdata2018e", "${var.m_appserver_tzdata2018e}"
    )
  )}"
}

## Secrets ############################################################################

resource "aws_secretsmanager_secret" "smtpsettings" {
  name = "smtpsettings.${var.stc_customer}.${var.stc_class}"
}

resource "aws_secretsmanager_secret" "keycloakrds" {
  name = "keycloakrds.${var.stc_customer}.${var.stc_class}"
}

resource "aws_secretsmanager_secret" "dashboard" {
  name = "dashboard.${var.stc_customer}.${var.stc_class}"
}

locals {

  smtp_settings = {
    smtpHost = "email-smtp.us-west-2.amazonaws.com",
    smtpPort = "587",
    fromName= "DoNotReply",
    fromEmail="donotreply@stchealthops.com",
    replyToName ="DoNotReply",
    replyToEmail="donotreply@stchealthops.com",
    envelopeFrom="",
    enableSSL = "false",
    enableStartTLS = "false",
    enableAuth = "true",
    authUsername = "AKIAI42GCSPXSZBAOBYA",
    authPassword = "Ai2Bk+/sdk8Ev1XoiWtZncMvtZUGq2v12ia59nngVwQk"
  },

  keycloak_rds_val = {
    name = "keycloakdb",
    user = "keycloak",
    password = "Keycloak16",
    iweburl = "http://${aws_instance.subiweb2.public_ip}:8080/iweb",
    iweborigin = "https://${aws_instance.subiweb2.public_ip}:8080",
    realm = "sso",
    phcurl = "http://${aws_instance.subphc2.public_ip}:8080/phc",
    phcorigin = "http://${aws_instance.subphc2.public_ip}:8080",
    orgfacroot = "http://${aws_instance.subiweb2.public_ip}:8080/OrgFacSearch",
    jasperreport = "http://jasper.${var.subdomain}.${var.hostedzone}:8080/jasperserver-pro",
    jasperbase = "http://jasper.${var.subdomain}.${var.hostedzone}:8080",
    afix = "http://afix.${var.subdomain}.${var.hostedzone}:3000",
    dashboard= "http://dashboard.${var.subdomain}.${var.hostedzone}:3000"
  },

  dashboard_val = {
    host = "dashboard.${var.subdomain}.${var.hostedzone}",
    keycloak = "keycloak.${var.subdomain}.${var.hostedzone}:8080",
    realm = "sso",
    jasper = "jasper",
    dashboard = "http://dashboard.${var.subdomain}.${var.hostedzone}:3000",
    iweb = "http://${aws_instance.subiweb2.public_ip}:8080/iweb",
    afix = "http://afix.${var.subdomain}.${var.hostedzone}:3000",
    phc = "http://${aws_instance.subphc2.public_ip}:8080/phc",
    iq = "iq",
    voms = "voms"
  }
}

resource "aws_secretsmanager_secret_version" "smtpsettings" {
  secret_id = "${aws_secretsmanager_secret.smtpsettings.id}"
  secret_string = "${jsonencode(local.smtp_settings)}"
}

resource "aws_secretsmanager_secret_version" "keycloakrds" {
    secret_id = "${aws_secretsmanager_secret.keycloakrds.id}"
    secret_string = "${jsonencode(local.keycloak_rds_val)}"
}

# Remove AFIX piece 
# Deleted as requested

resource "aws_secretsmanager_secret_version" "dashboard" {
  secret_id     = "${aws_secretsmanager_secret.dashboard.id}"
  secret_string = "${jsonencode(local.dashboard_val)}"
}


# This security group rule is important but it should be renamed appropriately
# jasper is a shared server so its name should NOT be tied to AFIX.
# Renamed it to ... sgr_ingress_sg_jasper_tomcat
resource "aws_security_group_rule" "sgr_ingress_sg_jasper_reports_tomcat" {
  cidr_blocks       = ["${aws_instance.jasper_reports.public_ip}/32"]
  description              = "Ingress from jasper to all on port 8080"
  type                     = "ingress"
  from_port                = 8080
  to_port                  = 8080
  protocol                 = "tcp"
  security_group_id = "${module.iwebsuite.sg_iwebsuite_private_id}"
}

# Again Keycloak is a shared resource and it's name should NOT be tied to AFIX
# This should be updated appropriately 
# Renamed it to ... sgr_ingress_sg_keycloak_tomcat
resource "aws_security_group_rule" "sgr_ingress_sg_keycloak_tomcat" {
  cidr_blocks       = ["${aws_instance.keycloak.public_ip}/32"]
  description              = "Ingress from keycloak to all on port 8080"
  type                     = "ingress"
  from_port                = 8080
  to_port                  = 8080
  protocol                 = "tcp"
  security_group_id = "${module.iwebsuite.sg_iwebsuite_private_id}"
}

# Update Name here as well
# Renamed it to ... sgr_ingress_sg_iweb_tomcat
resource "aws_security_group_rule" "sgr_ingress_sg_iweb_tomcat" {
  cidr_blocks       = ["${aws_instance.subiweb2.public_ip}/32"]
  description              = "Ingress from iweb to all on port 8080"
  type                     = "ingress"
  from_port                = 8080
  to_port                  = 8080
  protocol                 = "tcp"
  security_group_id = "${module.iwebsuite.sg_iwebsuite_private_id}"
}

# Update Name here as well
# Renamed it to ... sgr_ingress_sg_phc_tomcat
resource "aws_security_group_rule" "sgr_ingress_sg_phc_tomcat" {
  cidr_blocks       = ["${aws_instance.subphc2.public_ip}/32"]
  description              = "Ingress from PHC to all on port 8080"
  type                     = "ingress"
  from_port                = 8080
  to_port                  = 8080
  protocol                 = "tcp"
  security_group_id = "${module.iwebsuite.sg_iwebsuite_private_id}"
}

# Update Name here as well
# Renamed to ... sgr_ingress_sg_dashboard_tomcat
resource "aws_security_group_rule" "sgr_ingress_sg_dashboard_tomcat" {
  cidr_blocks       = ["${aws_instance.dashboard.public_ip}/32"]
  description              = "Ingress from dashboard to all on port 8080"
  type                     = "ingress"
  from_port                = 8080
  to_port                  = 8080
  protocol                 = "tcp"
  security_group_id = "${module.iwebsuite.sg_iwebsuite_private_id}"
}

# Update Name here as well
# DO WE NEED THIS ENTRY?
resource "aws_security_group_rule" "sgr_ingress_sg_jasper_node" {
  cidr_blocks       = ["${aws_instance.jasper_reports.public_ip}/32"]
  description              = "Ingress from jasper to all on port 3000"
  type                     = "ingress"
  from_port                = 3000
  to_port                  = 3000
  protocol                 = "tcp"
  security_group_id = "${module.iwebsuite.sg_iwebsuite_private_id}"
}

# Update Name here as well
# DO WEE NEED THIS ENTRY?
resource "aws_security_group_rule" "sgr_ingress_sg_keycloak_node" {
  cidr_blocks       = ["${aws_instance.keycloak.public_ip}/32"]
  description              = "Ingress from keycloak to all on port 3000"
  type                     = "ingress"
  from_port                = 3000
  to_port                  = 3000
  protocol                 = "tcp"
  security_group_id = "${module.iwebsuite.sg_iwebsuite_private_id}"
}

# Update Name here as well
# Renamed to ... sgr_ingress_sg_dashboard_node
# DO WE NEED THIS ENTRY?
resource "aws_security_group_rule" "sgr_ingress_sg_dashboard_node" {
  cidr_blocks       = ["${aws_instance.dashboard.public_ip}/32"]
  description              = "Ingress from dashboard to all on port 3000"
  type                     = "ingress"
  from_port                = 3000
  to_port                  = 3000
  protocol                 = "tcp"
  security_group_id = "${module.iwebsuite.sg_iwebsuite_private_id}"
}

resource "aws_security_group_rule" "sgr_ingress_sg_office_ip" {
  cidr_blocks       = ["63.233.123.90/32"]
  description              = "Ingress for office IP"
  type                     = "ingress"
  from_port                = 1
  to_port                  = 65535
  protocol                 = "tcp"
  security_group_id = "${module.iwebsuite.sg_iwebsuite_private_id}"
}

# Add new voms sg resource - DN (3/19) 
# DO WE NEED THIS ENTRY?
resource "aws_security_group_rule" "sgr_ingress_sg_voms_iweb_tomcat" {
  cidr_blocks       = ["${aws_instance.vomsapp.public_ip}/32"]
  description              = "Ingress for voms_iweb_tomcat"
  type                     = "ingress"
  from_port                = 8080
  to_port                  = 8080
  protocol                 = "tcp"
  security_group_id = "${module.iwebsuite.sg_iwebsuite_private_id}"
}

# Add new voms sg resource - DN (3/19)
# DO WE NEED THIS ENTRY?
resource "aws_security_group_rule" "sgr_ingress_sg_voms_keycloak_tomcat" {
  cidr_blocks       = ["${aws_instance.vomsapp.public_ip}/32"]
  description              = "Ingress for voms_keycloak_tomcat"
  type                     = "ingress"
  from_port                = 8080
  to_port                  = 8080
  protocol                 = "tcp"
  security_group_id = "${module.iwebsuite.sg_iwebsuite_private_id}"
}

# Add new voms sg resource - DN (3/19)
# DO WE NEED THIS ENTRY?
resource "aws_security_group_rule" "sgr_ingress_sg_voms_jasper_node" {
  cidr_blocks       = ["${aws_instance.vomsapp.public_ip}/32"]
  description              = "Ingress for voms_jasper_node"
  type                     = "ingress"
  from_port                = 3000
  to_port                  = 3000
  protocol                 = "tcp"
  security_group_id = "${module.iwebsuite.sg_iwebsuite_private_id}"
}

# Add new voms sg resource - DN (3/19)
# DO WE NEED THIS ENTRY?
resource "aws_security_group_rule" "sgr_ingress_sg_voms_keycloak_node" {
  cidr_blocks       = ["${aws_instance.vomsapp.public_ip}/32"]
  description              = "Ingress for voms_keycloak_node"
  type                     = "ingress"
  from_port                = 3000
  to_port                  = 3000
  protocol                 = "tcp"
  security_group_id = "${module.iwebsuite.sg_iwebsuite_private_id}"
}


# Add new voms sg resource - DN (3/19) 
# DO WE NEED THIS ENTRY?
output "output_vomsapp_instance_public_ip" {
  value = "${aws_instance.vomsapp.public_ip}"
}

output "output_keycloak_instance_public_ip" {
  value = "${aws_instance.keycloak.public_ip}"
}

output "output_keycloak_rds_instance_endpoint" {
  value = "${aws_db_instance.keycloak_rds.endpoint}"
}

output "output_sub_iweb_instance_endpoint" {
  value = "${aws_instance.subiweb2.public_ip}"
}

output "output_sub_phc_instance_endpoint" {
  value = "${aws_instance.subphc2.public_ip}"
}

output "output_sub_jasper_instance_endpoint" {
  value = "${aws_instance.jasper_reports.public_ip}"
}

output "output_sub_dashboard_instance_endpoint" {
  value = "${aws_instance.dashboard.public_ip}"
}
